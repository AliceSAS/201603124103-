{"version":3,"sources":["../server/server.js"],"names":["SourceMapSupport","install","app","use","express","static","bodyParser","json","db","get","req","res","filter","query","status","collection","find","toArray","then","metadata","total_count","issues","length","_metadata","records","catch","console","log","error","message","post","newIssue","body","created","Date","err","Issue","validateIssue","insertOne","cleanupIssue","_id","result","insertedId","limit","next","savedIssue","sendFile","path","resolve","MongoClient","connect","connection","listen"],"mappings":";;AAAA;;;;AAEA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAPAA,2BAAiBC,OAAjB;;;AASA,IAAMC,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQC,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACAH,IAAIC,GAAJ,CAAQG,qBAAWC,IAAX,EAAR;;AAEA,IAAIC,WAAJ;;AAEAN,IAAIO,GAAJ,CAAQ,aAAR,EAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnC,MAAMC,SAAS,EAAf;AACA,MAAIF,IAAIG,KAAJ,CAAUC,MAAd,EAAsBF,OAAOE,MAAP,GAAgBJ,IAAIG,KAAJ,CAAUC,MAA1B;;AAEtBN,KAAGO,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6BJ,MAA7B,EAAqCK,OAArC,GACCC,IADD,CACM,kBAAU;AACd,QAAMC,WAAW,EAAEC,aAAaC,OAAOC,MAAtB,EAAjB;AACAX,QAAIJ,IAAJ,CAAS,EAAEgB,WAAWJ,QAAb,EAAuBK,SAASH,MAAhC,EAAT;AACD,GAJD,EAKCI,KALD,CAKO,iBAAS;AACdC,YAAQC,GAAR,CAAYC,KAAZ;AACAjB,QAAIG,MAAJ,CAAW,GAAX,EAAgBP,IAAhB,CAAqB,EAAEsB,qCAAmCD,KAArC,EAArB;AACD,GARD;AASD,CAbD;;AAeA1B,IAAI4B,IAAJ,CAAS,aAAT,EAAwB,UAACpB,GAAD,EAAMC,GAAN,EAAc;AACpC,MAAMoB,WAAWrB,IAAIsB,IAArB;AACAD,WAASE,OAAT,GAAmB,IAAIC,IAAJ,EAAnB;AACA,MAAI,CAACH,SAASjB,MAAd,EAAsB;AACpBiB,aAASjB,MAAT,GAAkB,KAAlB;AACD;;AAED,MAAMqB,MAAMC,gBAAMC,aAAN,CAAoBN,QAApB,CAAZ;AACA,MAAII,GAAJ,EAAS;AACPxB,QAAIG,MAAJ,CAAW,GAAX,EAAgBP,IAAhB,CAAqB,EAAEsB,+BAA6BM,GAA/B,EAArB;AACA;AACD;;AAED3B,KAAGO,UAAH,CAAc,QAAd,EAAwBuB,SAAxB,CAAkCF,gBAAMG,YAAN,CAAmBR,QAAnB,CAAlC,EAAgEb,IAAhE,CAAqE;AAAA,WACnEV,GAAGO,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6B,EAAEwB,KAAKC,OAAOC,UAAd,EAA7B,EAAyDC,KAAzD,CAA+D,CAA/D,EACCC,IADD,EADmE;AAAA,GAArE,EAIC1B,IAJD,CAIM,sBAAc;AAClBP,QAAIJ,IAAJ,CAASsC,UAAT;AACD,GAND,EAOCpB,KAPD,CAOO,iBAAS;AACdC,YAAQC,GAAR,CAAYC,KAAZ;AACAjB,QAAIG,MAAJ,CAAW,GAAX,EAAgBP,IAAhB,CAAqB,EAAEsB,qCAAmCD,KAArC,EAArB;AACD,GAVD;AAWD,CAxBD;;AA0BA1B,IAAIO,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzBA,MAAImC,QAAJ,CAAaC,eAAKC,OAAL,CAAa,mBAAb,CAAb;AACD,CAFD;;AAIAC,qBAAYC,OAAZ,CAAoB,kCAApB,EAAwDhC,IAAxD,CAA6D,sBAAc;AACzEV,OAAK2C,UAAL;AACAjD,MAAIkD,MAAJ,CAAW,IAAX,EAAiB,YAAM;AACrB1B,YAAQC,GAAR,CAAY,0BAAZ;AACD,GAFD;AAGD,CALD,EAKGF,KALH,CAKS,iBAAS;AAChBC,UAAQC,GAAR,CAAY,QAAZ,EAAsBC,KAAtB;AACD,CAPD","file":"server.js","sourcesContent":["import SourceMapSupport from 'source-map-support';\r\nSourceMapSupport.install();\r\nimport 'babel-polyfill';\r\n\r\nimport path from 'path';\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport { MongoClient } from 'mongodb';\r\nimport Issue from './issue.js';\r\n\r\nconst app = express();\r\napp.use(express.static('static'));\r\napp.use(bodyParser.json());\r\n\r\nlet db;\r\n\r\napp.get('/api/issues', (req, res) => {\r\n  const filter = {};\r\n  if (req.query.status) filter.status = req.query.status;\r\n\r\n  db.collection('issues').find(filter).toArray()\r\n  .then(issues => {\r\n    const metadata = { total_count: issues.length };\r\n    res.json({ _metadata: metadata, records: issues });\r\n  })\r\n  .catch(error => {\r\n    console.log(error);\r\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\r\n  });\r\n});\r\n\r\napp.post('/api/issues', (req, res) => {\r\n  const newIssue = req.body;\r\n  newIssue.created = new Date();\r\n  if (!newIssue.status) {\r\n    newIssue.status = 'New';\r\n  }\r\n\r\n  const err = Issue.validateIssue(newIssue);\r\n  if (err) {\r\n    res.status(422).json({ message: `Invalid request: ${err}` });\r\n    return;\r\n  }\r\n\r\n  db.collection('issues').insertOne(Issue.cleanupIssue(newIssue)).then(result =>\r\n    db.collection('issues').find({ _id: result.insertedId }).limit(1)\r\n    .next()\r\n  )\r\n  .then(savedIssue => {\r\n    res.json(savedIssue);\r\n  })\r\n  .catch(error => {\r\n    console.log(error);\r\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\r\n  });\r\n});\r\n\r\napp.get('*', (req, res) => {\r\n  res.sendFile(path.resolve('static/index.html'));\r\n});\r\n\r\nMongoClient.connect('mongodb://localhost/issuetracker').then(connection => {\r\n  db = connection;\r\n  app.listen(3000, () => {\r\n    console.log('App started on port 3000');\r\n  });\r\n}).catch(error => {\r\n  console.log('ERROR:', error);\r\n});\r\n"]}